input {
    file {
        path => "/var/log/django/django.log*"
        start_position => "beginning"
        sincedb_path => "/dev/null"
    }
}

filter {
    grok {
        match => { "message" => [   "%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{LOGLEVEL:log_level} %{WORD:module}: \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{DATA} %{NUMBER:status_code} %{NUMBER:response_time}",
                                    "%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{LOGLEVEL:log_level} %{WORD:module}: language: %{WORD:language_type}",
                                    "%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{LOGLEVEL:log_level} %{WORD:module}: %{WORD:sub_module}: %{WORD:username}",
                                    "%{TIMESTAMP_ISO8601:[@metadata][timestamp]} %{LOGLEVEL:log_level} %{WORD:module}: %{GREEDYDATA:msg}" ]}
    }

    date { 
        match => [ "[@metadata][timestamp]", "yyyy-MM-dd HH:mm:ss,SSS" ] 
    }

    mutate {
        add_field => { "[@metadata][original]" => "%{message}" }
        remove_field => ["message"]
    }

    mutate {
        rename => { "msg" => "message" }
    }

    mutate {
        remove_field => [ "log", "host", "event"]
    }
}

output {
    if "_grokparsefailure" not in [tags] {
        elasticsearch {
            hosts => "${ELASTIC_HOST}:${ELASTIC_PORT}"
            user => "logstash_internal"
            password => "${LOGSTASH_INTERNAL_PASSWORD}"
            ilm_rollover_alias => "django"
            ilm_pattern => "000001"
            ilm_policy => "delete_after_1_day"
        }
    } else {
        stdout { codec => rubydebug { metadata => true } }
    }
}
